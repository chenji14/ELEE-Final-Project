#include <SPI.h>
#include <WiFiNINA.h>
#include "arduino_secrets.h"

// Configure the pins used for the ESP32 connection
#define SPIWIFI       SPI  // The SPI port
#define SPIWIFI_SS    10   // Chip select pin
#define ESP32_RESETN  5   // Reset pin
#define SPIWIFI_ACK   7   // a.k.a BUSY or READY pin
#define ESP32_GPIO0   6

#define greenLed 2
#define yellowLed 3

///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = SECRET_SSID;        // your network SSID (name)
char pass[] = SECRET_PASS;        // your network password (use for WPA, or use as key for WEP)
int status = WL_IDLE_STATUS;     // the Wifi radio's status
int keyIndex = 0;
WiFiServer server(80);
String readString;

void setup()
{
  pinMode(greenLed, INPUT);
  pinMode(yellowLed, INPUT);
  Serial.begin(9600);

  while (status != WL_CONNECTED)
  {
    Serial.print("Attempting to connect to Network named: ");
    Serial.println(ssid);
    status = WiFi.begin(ssid, pass);
    delay(3000);
  }
  server.begin();
  Serial.print("You're connected to the network with ");
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);
}

void loop()
{
  EnergyCal();

  WiFiClient client = server.available();
  if (client)
  {
    Serial.println("new client");
    boolean currentLineIsBlank = true;
    while (client.connected())
    {
      if (client.available())
      {
        char c = client.read();
        if (readString.length() < 800)
        {
          readString += c;
          Serial.write(c);
          if (c == '\n' && currentLineIsBlank)
          {
            client.println("HTTP/1.1 200 OK"); //send new page
            client.println("Content-Type: text/html");
            client.println("Connection: close");  // the connection will be closed after completion of the response
            client.println("Refresh: 60");
            client.println();

            client.println("<HTML>");
            
            client.println("<HEAD>");
            client.println("<meta name = \"viewport\" content = \"width=device-width, initial-scale=1\">");
            client.println("<style>");
            client.println(".dropbtn {background-color: #4CAF50;color: white;padding: 16px;font-size: 16px;border: none;}");
            client.println(".dropdown { position: relative;display: inline-block;}");
            client.println(".dropdown-content { display: none;position: absolute; background-color: #f1f1f1; min-width: 160px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);  z-index: 1;}");
            client.println(".dropdown-content a { color: black; padding: 12px 16px; text-decoration: none; display: block;}");
            client.println(".dropdown-content a:hover {background-color: #ddd;}");
            client.println(".dropdown:hover .dropdown-content {display: block;}");
            client.println(".dropdown:hover .dropbtn {background-color: #3e8e41;}");
            client.println("</style>");
            client.println("</head>");

            client.println("<body>");
            client.println("<center><h2>Power consumption</h2><center>");
            client.println("<p>Please choose one of the following dropdown means</p>");
            client.println("<div class = \"dropdown\">");
            client.println("<button class = \"dropbtn\">LED </button>");
            client.println("<div class = \"dropdown-content\">");
            client.println("<a href = \"?Green\">Green LED </a>");
            client.println("<a href = \"?Yellow\">Yellow LED </a>");
            client.println("<a href = \"?gy\">gy LED </a>");
            client.println("</div>");
            client.println("</div>");
            client.println("</BODY>");

            client.println("</HTML>");
            client.println("<meta http-equiv=\"refresh\" content=\"4\">");

  
            if (readString.indexOf("?Green") > 0)
            {
              Serial.println("A");
            }
            delay(5);
            if (readString.indexOf("?Yellow") > 0)
            {
              Serial.println("B");
            }
            delay(5);
            if (readString.indexOf("?gy") > 0)
            {
              Serial.println("C");
            }
            delay(5);
            
            readString = "";
            delay(5);
            client.stop();
            Serial.println("client disonnected");
          }
        }
      }
    }
  }
}

void EnergyCal()
{
  unsigned long currenttime1, currenttime2, delaytime;
  float Energy;
  if ((digitalRead(greenLed) == HIGH) && (digitalRead(yellowLed) == LOW))
  {
    Serial.println('G');
    currenttime1 = millis();
    while (1)
    {
      if (digitalRead(greenLed) == LOW)
      {
        currenttime2 = millis();
        delaytime = currenttime2 - currenttime1;
        Energy = 24 * delaytime / 1000;      //the unit of Energy is mw.
        Serial.print("Energy: ");
        Serial.println(Energy);
        break;
      }
    }
  }
  else if ((digitalRead(greenLed) == LOW) && (digitalRead(yellowLed) == HIGH))
  {
    Serial.println('Y');
    currenttime1 = millis();
    while (1)
    {
      if (digitalRead(yellowLed) == LOW)
      {
        currenttime2 = millis();
        delaytime = currenttime2 - currenttime1;
        Energy = 24 * delaytime / 1000;      //the unit of Energy is mw.
        Serial.print("Energy: ");
        Serial.println(Energy);
        break;
      }
    }
  }
  else if ((digitalRead(greenLed) == HIGH) && (digitalRead(yellowLed) == HIGH))
  {
    Serial.println("YG");
    currenttime1 = millis();
    while (1)
    {
      if ((digitalRead(greenLed) == LOW) && (digitalRead(yellowLed) == LOW))
      {
        currenttime2 = millis();
        delaytime = currenttime2 - currenttime1;
        Energy = 2 * 24 * delaytime / 1000;    //the unit of Energy is mw.
        Serial.print("Energy: ");
        Serial.println(Energy);
        break;
      }
    }
  }
}
